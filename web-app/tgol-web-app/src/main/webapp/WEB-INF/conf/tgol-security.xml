<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/security
      http://www.springframework.org/schema/security/spring-security-3.1.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Loads ACL related configurations -->
	<beans:import resource="acl-context.xml" />

	<!-- use-expressions="true" -->
	<http auto-config="true" use-expressions="true"
		access-denied-page="/access-denied.html" disable-url-rewriting="true">
		<!-- <intercept-url pattern="/*.html*" requires-channel="https"/> -->
		<!-- <intercept-url pattern="/login.html*" filters="none"/> -->
		<intercept-url pattern="/admin.html" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/add*" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/edit*" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/delete*" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/manage*" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/manage-contracts/*"
			access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/manage-contracts/add*"
			access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/manage-contracts/delete*"
			access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/admin/manage-contracts/edit*"
			access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/home.html"
			access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/home/contract*"
			access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/home/contract/*"
			access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/home/contract/audit*"
			access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/home/contract/page*"
			access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')" />
		<form-login login-page="/login.html"
			authentication-failure-url="/login.html?error=errorOnLogin"
			default-target-url="/dispatch.html" />
		<logout delete-cookies="JSESSIONID" invalidate-session="false" />
		<session-management invalid-session-url="/login.html?error=sessionTimeout">
			<concurrency-control max-sessions="100"
				error-if-maximum-exceeded="true" />
		</session-management>
	</http>

	<!-- <authentication-manager alias="authenticationManager"> -->
	<!-- <authentication-provider user-service-ref="tgolAuthenticationProvider"> -->
	<!-- <password-encoder hash="md5" /> -->
	<!-- </authentication-provider> -->
	<!-- </authentication-manager> -->

	<authentication-manager>
		<ldap-authentication-provider
			user-search-filter="(uid={0})" user-search-base="ou=users"
			group-search-filter="(uniqueMember={0})" group-search-base="ou=groups"
			group-role-attribute="cn" role-prefix="ROLE_"
			user-context-mapper-ref="inetOrgContextMapper">
		</ldap-authentication-provider>

	</authentication-manager>
	<beans:bean id="inetOrgContextMapper" class="org.springframework.security.ldap.userdetails.InetOrgPersonContextMapper"/>

	<ldap-server url="ldap://localhost:10389/o=opens"
		manager-dn="uid=admin,ou=system" manager-password="secret" />


	<!-- <beans:bean id="roleHierarchyBasedAccessDecisionManagerBean" -->
	<!-- class="org.springframework.security.access.vote.AffirmativeBased"> -->
	<!-- <beans:property name="decisionVoters"> -->
	<!-- <beans:list> -->
	<!-- <beans:ref bean="roleHierarchyVoter" /> -->
	<!-- <beans:bean -->
	<!-- class="org.springframework.security.access.vote.AuthenticatedVoter" 
		/> -->
	<!-- <beans:bean -->
	<!-- class="org.springframework.security.web.access.expression.WebExpressionVoter"> -->
	<!-- <beans:property name="expressionHandler"> -->
	<!-- <beans:bean -->
	<!-- class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"> -->
	<!-- <beans:property name="roleHierarchy" ref="roleHierarchy" /> -->
	<!-- </beans:bean> -->
	<!-- </beans:property> -->
	<!-- </beans:bean> -->
	<!-- </beans:list> -->
	<!-- </beans:property> -->
	<!-- </beans:bean> -->
	<!-- <beans:bean id="roleHierarchyVoter" -->
	<!-- class="org.springframework.security.access.vote.RoleHierarchyVoter"> -->
	<!-- <beans:constructor-arg ref="roleHierarchy" /> -->
	<!-- </beans:bean> -->



	<!-- <beans:bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/> -->

	<!-- <beans:bean id="tgolAuthenticationProvider" -->
	<!-- class="org.opens.tgol.security.userdetails.TgolUserDetailsService"> -->
	<!-- <beans:property name="dataSource" ref="dataSource" /> -->
	<!-- <beans:property name="usersByUsernameQuery"> -->
	<!-- <beans:value>SELECT Email1, Password, Activated as enabled -->
	<!-- FROM -->
	<!-- TGSI_USER -->
	<!-- WHERE Email1=? -->
	<!-- </beans:value> -->
	<!-- </beans:property> -->
	<!-- <beans:property name="authoritiesByUsernameQuery"> -->
	<!-- <beans:value>SELECT TGSI_USER.Email1, TGSI_ROLE.Role_Name as -->
	<!-- authorities -->
	<!-- FROM TGSI_USER, TGSI_ROLE -->
	<!-- WHERE TGSI_USER.Email1 = ? AND -->
	<!-- TGSI_USER.ROLE_Id_Role=TGSI_ROLE.Id_Role -->
	<!-- </beans:value> -->
	<!-- </beans:property> -->
	<!-- <beans:property name="roleHierarchy" ref="roleHierarchy"/> -->
	<!-- </beans:bean> -->

	<!-- <beans:bean id="roleHierarchy" -->
	<!-- class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl"> -->
	<!-- <beans:property name="hierarchy"> -->
	<!-- <beans:value> -->
	<!-- ROLE_ADMIN > ROLE_USER -->
	<!-- ROLE_USER > ROLE_VISITOR -->
	<!-- </beans:value> -->
	<!-- </beans:property> -->
	<!-- </beans:bean> -->

</beans:beans>